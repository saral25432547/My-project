using UnityEngine;
using System.Collections;

public class PlayerController : MonoBehaviour
{
    //playerMove
    public CharacterController controller;
    public bool RulerBlade = false;  // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ñ‡∏∑‡∏≠‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
    public bool isGreatSwordMode = false; // üîπ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò (‡∏î‡∏≤‡∏ö‡∏¢‡∏≤‡∏ß / ‡∏î‡∏≤‡∏ö‡πÉ‡∏´‡∏ç‡πà)

    private Animator animator;
    [SerializeField] private GameObject weapon;
    [SerializeField] private Animator RulerBladeController;
    public bool canMove = true;  // ‚úÖ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    public float movementSpeedMultiplier = 1f;  // ‚úÖ ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    
    public GameObject[] sparkEffects; // üî• ‡πÄ‡∏Å‡πá‡∏ö 2 ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ

    public float maxHealth = 100f;
    public float health = 100f;  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï

    public HealthBar playerhealthBar;

    public Vector3 playerVelocity;
    public bool groundedPlayer;
    [SerializeField] private float playerSpeed = 5f;
    [SerializeField] private Camera followCamera;
    [SerializeField] private float rotationSpeed = 10f;
    [SerializeField] private float gravityValue = -13f;
    [SerializeField] private float jumpHeight = 2.5f;
    
    public AudioSource weaponSwitchSound;  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
    
    private void Start()
    {
        health = maxHealth;
        playerhealthBar.SetMaxHealth(maxHealth);
        
        controller = GetComponent<CharacterController>();
        animator = GetComponentInChildren<Animator>(); // ‡∏î‡∏∂‡∏á Animator ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£

        if (weapon != null)
        {
            weapon.SetActive(false);  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
            RulerBladeController = weapon.GetComponent<Animator>();
        }

        if (weaponSwitchSound == null) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ AudioSource ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        {
            weaponSwitchSound = GetComponent<AudioSource>();  // ‡∏î‡∏∂‡∏á AudioSource
        }
    }

    void Update()
    {
            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠ toggle ‡∏Å‡∏≤‡∏£‡∏ñ‡∏∑‡∏≠‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
        if (Input.GetKeyDown(KeyCode.Alpha1))
        {
            // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RulerBlade
            RulerBlade = !RulerBlade;

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Animator
            animator.SetBool("RulerBlade", RulerBlade);

            // üéÆ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ShowSparkEffects ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î RulerBlade
            ShowSparkEffects();
        }
        if (weapon != null)
        {
            weapon.SetActive(RulerBlade);  // ‡∏ñ‡πâ‡∏≤ RulerBlade ‡πÄ‡∏õ‡πá‡∏ô true ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
        }

        // üõ†Ô∏è **‡∏Å‡∏î R ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò**
        if (RulerBlade && Input.GetKeyDown(KeyCode.R))
        {
            StartCoroutine(SwitchWeaponMode());
        }

        Movement();
    }
    
    void ShowSparkEffects()
    {
        if (sparkEffects.Length == 0) return;

        foreach (GameObject effect in sparkEffects)
        {
            if (effect == null) continue;

            effect.SetActive(true);
            StartCoroutine(HideEffectAfterTime(effect, 0.7f)); // ‚è≥ ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏´‡∏•‡∏±‡∏á 0.7 ‡∏ß‡∏¥
        }
    }
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ö‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    IEnumerator HideEffectAfterTime(GameObject effect, float delay)
    {
        yield return new WaitForSeconds(delay);
        effect.SetActive(false);
    }

    private IEnumerator SwitchWeaponMode()
    {
        // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
        if (weaponSwitchSound != null)
        {
            weaponSwitchSound.Play();
        }
        // üî• ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
        animator.SetTrigger("SwitchWeapon");
        if (RulerBladeController != null)
        {
            RulerBladeController.SetTrigger("SwitchWeapon");
        }

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        yield return new WaitForSeconds(1.5f); // üîπ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô

        // üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏î‡∏≤‡∏ö‡πÉ‡∏´‡∏ç‡πà
        isGreatSwordMode = !isGreatSwordMode;

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Blend Tree
        animator.SetBool("isGreatSwordMode", isGreatSwordMode);
    }

    public static PlayerController instance;

    private void Awake()
    {
        instance = this;
    }
    
    public bool isCharging { get; set; } = false; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô set ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô public

    public void TakeDamage(float damage)
    {
        // üõë ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏î‡∏≤‡πÄ‡∏°‡∏à‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à
        if (isCharging)
        {
            Debug.Log("‚ùå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÇ‡∏à‡∏°‡∏ï‡∏µ ‚Üí ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏î‡∏≤‡πÄ‡∏°‡∏à!");
            animator.SetTrigger("ChargeBlock"); // üé¨ ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à
            return;
        }

        health -= damage;
        playerhealthBar.SetHealth(health);

        Debug.Log("Player received damage: " + damage);
        Debug.Log("Current Health: " + health);

        // üé¨ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏î‡∏≤‡πÄ‡∏°‡∏à‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
        if (isGreatSwordMode)
        {
            animator.SetTrigger("HitGreatSword"); // üé¨ ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÇ‡∏î‡∏ô‡∏ï‡∏µ‡∏Ç‡∏≠‡∏á GreatSword
        }
        else
        {
            animator.SetTrigger("HitRulerBlade"); // üé¨ ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÇ‡∏î‡∏ô‡∏ï‡∏µ‡∏Ç‡∏≠‡∏á RulerBlade
        }

        if (health <= 0)
        {
            Die(); 
        }
    }

    public bool isDead = false;
    public void Die()
    {
        // üî¥ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        canMove = false;
        controller.enabled = false; // ‡∏õ‡∏¥‡∏î CharacterController ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö
        animator.SetTrigger("Die"); // üü¢ ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏¢

        Debug.Log("Player died!");
        isDead = true; // üü° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î
    public void Heal(float amount)
    {
        health += amount;
        if (health > maxHealth) health = maxHealth; // ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô max
        playerhealthBar.SetHealth(health); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI Health Bar
    }

    // ‚úÖ ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    public IEnumerator SpeedBoost(float speedIncreasePercent, float duration)
    {
        float originalSpeed = playerSpeed;
        playerSpeed *= (1 + speedIncreasePercent / 100f); // ‡πÄ‡∏û‡∏¥‡πà‡∏° speed

        yield return new WaitForSeconds(duration); // ‚è≥ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î
        playerSpeed = originalSpeed; // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥
    }

    // ‚úÖ ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    public IEnumerator AttackBoost(float attackIncreasePercent, float duration)
    {
        float originalMultiplier = movementSpeedMultiplier;
        movementSpeedMultiplier *= (1 + attackIncreasePercent / 100f); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ

        yield return new WaitForSeconds(duration); // ‚è≥ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î
        movementSpeedMultiplier = originalMultiplier; // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥
    }

    void Movement()
    {
        groundedPlayer = controller.isGrounded;
        // ScriptPlayerController#4.1 PlayerJumpFix
        if (controller.isGrounded && playerVelocity.y < -2)
        {
            playerVelocity.y = -1f;
        }
        
        // ScriptPlayerController#1 PlayerMove
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        animator.SetFloat("Horizontal", horizontalInput);
        animator.SetFloat("Vertical", verticalInput);

        Vector3 movementInput = Quaternion.Euler(0, followCamera.transform.eulerAngles.y, 0)
                                * new Vector3(horizontalInput, 0, verticalInput);

        Vector3 movementDirection = movementInput.normalized;

        // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏à‡∏°‡∏ï‡∏µ
        if (isGreatSwordMode) // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Great Sword
        {
            movementSpeedMultiplier = 0.1f; // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ
        }
        else
        {
            movementSpeedMultiplier = 1f; // ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥
        }

        if (!canMove) return; // ‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πâ‡∏≤ canMove ‡πÄ‡∏õ‡πá‡∏ô false
        controller.Move(movementDirection * playerSpeed * movementSpeedMultiplier * Time.deltaTime);

        controller.Move(movementDirection * playerSpeed * Time.deltaTime);

        // ScriptPlayerController#2 PlayerRotation
        if (movementDirection.magnitude > 0) // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        {
            Vector3 cameraForward = followCamera.transform.forward; // üî¥ ‡πÄ‡∏≠‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
            cameraForward.y = 0; // üî¥ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏Å‡∏ô Y
            Quaternion desiredRotation = Quaternion.LookRotation(cameraForward); // üî¥ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏´‡∏±‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á

            transform.rotation = Quaternion.Slerp(transform.rotation, desiredRotation, rotationSpeed * Time.deltaTime);
        }

        // ScriptPlayerController#4 PlayerJump
        if (Input.GetButtonDown("Jump") && groundedPlayer)
        {
            playerVelocity.y += Mathf.Sqrt(jumpHeight * -3.0f * gravityValue);
            animator.SetBool("isJumping", true);  // üü° ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô Jumping
        }
        
        // üü† **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (Falling)**
        if (!groundedPlayer && playerVelocity.y < 0)
        {
            animator.SetBool("isJumping", false);
            animator.SetBool("isFalling", true);  // üü† ‡πÄ‡∏•‡πà‡∏ô FallingIdle
        }

        // üü¢ **‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ñ‡∏∂‡∏á‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô FallToStand**
        if (groundedPlayer && animator.GetBool("isFalling"))
        {
            animator.SetBool("isFalling", false);
            animator.Play("FallToStand");  // üü¢ ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô
        }

        // ScriptPlayerController#3 PlayerGravity
        playerVelocity.y += gravityValue * Time.deltaTime;
        controller.Move(playerVelocity * Time.deltaTime);
    }

}
