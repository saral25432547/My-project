using System.Collections;
using System.Collections.Generic;
using UnityEngine;
 
public class GreatSwordFighter : MonoBehaviour
{
    private Animator animator;
    private PlayerController playerController; // ‚úÖ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà PlayerController

    public float cooldownTime = 2f;
    private float nextFireTime = 0f;
    public static int noOfClicks = 0;

    public SkillBar skillhbar;  // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Energy Bar
    float lastClickedTime = 0;
    float maxComboDelay = 1;

    public GameObject[] slashEffects; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
    public GameObject[] hitboxSlashes; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° hitbox ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö
    public GameObject[] chargeEffects; // ‚úÖ ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏ä‡∏≤‡∏£‡πå‡∏à (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å SlashEffect)
    public GameObject chargeAttackEffect; // ‚úÖ ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á Charge Attack
    public GameObject chargeAttackHitbox; // ‚úÖ Hitbox ‡∏Ç‡∏≠‡∏á Charge Attack

    public bool isCharging = false; // ‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
    public float chargeStartTime = 0f;
    public float maxChargeTime = 3f; // ‚úÖ ‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    public float maxChargeCooldown = 5f; // ‚úÖ ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ Charge Attack
    private float chargeCooldown = 0f; // ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
    public float chargeCooldownCount = 5f;

    private void Start()
    {
        animator = GetComponentInChildren<Animator>(); // ‡∏î‡∏∂‡∏á Animator ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        playerController = GetComponent<PlayerController>(); // ‚úÖ ‡∏î‡∏∂‡∏á PlayerController

        if (skillhbar != null)
            skillhbar.SetMaxSkill(maxChargeCooldown);  // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Energy Bar ‡πÄ‡∏ï‡πá‡∏°
        else
            Debug.LogError("‚ùå SkillBar ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏ô Inspector");
    }

    void Update()
    {
        // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Great Sword"
        if (playerController == null || !playerController.RulerBlade || !playerController.isGreatSwordMode) 
        {
            return;
        }

        // ‚úÖ ‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò‡∏≠‡∏¢‡∏π‡πà
        if (animator.GetCurrentAnimatorStateInfo(0).IsName("ChangetoRulerBlade")) 
        {
            return;
        }

        // ‚úÖ ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à
        if (isCharging || animator.GetCurrentAnimatorStateInfo(0).IsName("GS_Charge"))
        {
            playerController.canMove = false;
            playerController.movementSpeedMultiplier = 0f;
            Debug.Log("‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");

            // ‡∏´‡πâ‡∏≤‡∏°‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ç‡∏ì‡∏∞‡∏ä‡∏≤‡∏£‡πå‡∏à
            if (Input.GetMouseButtonDown(0)) // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ì‡∏∞‡∏ä‡∏≤‡∏£‡πå‡∏à
            {
                return;  // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
            }
        }
        else
        {
            playerController.canMove = true;
            playerController.movementSpeedMultiplier = 1f;
            Debug.Log("‡πÑ‡∏°‡πà‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏Ç‡∏ß‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÄ‡∏ï‡πá‡∏° 3 ‡∏ß‡∏¥
        if (isCharging && (Input.GetMouseButtonUp(1) || Time.time - chargeStartTime >= maxChargeTime))
        {
            ReleaseChargeAttack();
        }

        if (chargeCooldown > 0)
        {
            chargeCooldown -= Time.deltaTime;
        }

        if (Time.time - lastClickedTime > maxComboDelay)
        {
            noOfClicks = 0;
        }
        
        if (Time.time > nextFireTime)
        {
            if (Input.GetMouseButtonDown(0))
            {
                OnClick();
            }

            // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏Ç‡∏ß‡∏≤
            if (Input.GetMouseButtonDown(1) && chargeCooldown <= 0)
            {
                StartChargeAttack();
            }
        }

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏ô
        bool isGSFirstCombo = animator.GetCurrentAnimatorStateInfo(0).IsName("GSFirstCombo");
        bool isGSSecondCombo = animator.GetCurrentAnimatorStateInfo(0).IsName("GSSecondCombo");
        bool isGSThirdCombo = animator.GetCurrentAnimatorStateInfo(0).IsName("GSThirdCombo");

        if (isGSFirstCombo)
        {
            playerController.canMove = false;
        }
        else if (isGSSecondCombo || isGSThirdCombo)
        {
            playerController.movementSpeedMultiplier = 0.1f;  // üê¢ ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß 50%
        }
        else
        {
            playerController.movementSpeedMultiplier = 1f;  // üîÑ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥
        }
        

        // ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Great Sword
        if (animator.GetCurrentAnimatorStateInfo(0).normalizedTime > 0.7f && animator.GetCurrentAnimatorStateInfo(0).IsName("GSFirstCombo"))
        {
            animator.SetBool("hit1", false);
        }
        if (animator.GetCurrentAnimatorStateInfo(0).normalizedTime > 0.7f && animator.GetCurrentAnimatorStateInfo(0).IsName("GSSecondCombo"))
        {
            animator.SetBool("hit2", false);
        }
        if (animator.GetCurrentAnimatorStateInfo(0).normalizedTime > 0.7f && animator.GetCurrentAnimatorStateInfo(0).IsName("GSThirdCombo"))
        {
            animator.SetBool("hit3", false);
            noOfClicks = 0;
        }

        if (Time.time - lastClickedTime > maxComboDelay)
        {
            noOfClicks = 0;
        }

        // ‚úÖ cooldown time
        if (Time.time > nextFireTime)
        {
            // ‚úÖ Check for mouse input
            if (Input.GetMouseButtonDown(0))
            {
                OnClick();
            }
        }
    }

    void StartChargeAttack()
    {
        if (isCharging) return;

        isCharging = true;
        playerController.isCharging = true;  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ isCharging ‡πÉ‡∏ô PlayerController
        playerController.canMove = false; 
        playerController.movementSpeedMultiplier = 0f;

        chargeStartTime = Time.time;
        animator.SetBool("isCharging", true);

        StartCoroutine(ChargeEffectSequence()); 

        Debug.Log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÇ‡∏à‡∏°‡∏ï‡∏µ");
    }

    void ReleaseChargeAttack()
    {
        if (!isCharging) return;

        isCharging = false;
        playerController.isCharging = false;  // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à
        playerController.canMove = false;
        playerController.movementSpeedMultiplier = 0f;

        animator.SetBool("isCharging", false);
        animator.SetTrigger("heavyAttack");

        ShowChargeAttackEffect();

        chargeCooldown = maxChargeCooldown; // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå 5 ‡∏ß‡∏¥

        StopCoroutine(ChargeEffectSequence());

        Debug.Log("‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏´‡∏ô‡∏±‡∏Å!");

        StartCoroutine(ResetToBlendTree());

        chargeCooldownCount = 0; // ‚úÖ ‡∏´‡∏•‡∏≠‡∏î‡∏•‡∏î‡∏•‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        skillhbar.SetSkill(chargeCooldownCount);
        StartCoroutine(IncreaseSkillBar());
    }

    IEnumerator IncreaseSkillBar()
    {
        float duration = maxChargeCooldown; // ‚úÖ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ß‡∏¥
        float timePassed = 0;

        while (timePassed < duration)
        {
            chargeCooldownCount = Mathf.Lerp(0, maxChargeCooldown, timePassed / duration); // ‚úÖ ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏° cooldown
            skillhbar.SetSkill(chargeCooldownCount); // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏≠‡∏î

            timePassed += Time.deltaTime;
            yield return null; // ‚úÖ ‡∏£‡∏≠‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }

        chargeCooldownCount = maxChargeCooldown; // ‚úÖ ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï cooldown ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô
        skillhbar.SetSkill(chargeCooldownCount); // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI
    }

    IEnumerator ResetToBlendTree()
    {
        yield return new WaitForSeconds(1.2f); // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö
        animator.SetTrigger("returnToIdle");

        playerController.canMove = true;  // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏ö
        playerController.movementSpeedMultiplier = 1f;

        Debug.Log("‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà BlendTree");
    }

    public int chargeLevel = 0; // üåü ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à

    IEnumerator ChargeEffectSequence()
    {
        chargeLevel = 0; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö 0
        for (int i = 0; i < 3; i++)
        {
            if (!isCharging) yield break;

            chargeLevel = i + 1; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏≤‡∏£‡πå‡∏à (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1)
            Debug.Log("Charge Level: " + chargeLevel);

            ShowChargeEffect(i);
            yield return new WaitForSeconds(1f);
        }
    }


    void ShowChargeEffect(int effectIndex)
    {
        if (chargeEffects.Length == 0) return; // ‚úÖ ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ

        int index = Mathf.Clamp(effectIndex, 0, chargeEffects.Length - 1);
        GameObject effect = chargeEffects[index]; 

        effect.SetActive(true);
        StartCoroutine(HideEffectAfterTime(effect, 0.5f)); // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏´‡∏•‡∏±‡∏á 0.5 ‡∏ß‡∏¥

        Debug.Log($"‡πÅ‡∏™‡∏î‡∏á Charge Effect: {index}");
    }

    void ShowChargeAttackEffect()
    {
        if (chargeAttackEffect == null) return; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        if (chargeAttackHitbox == null) return;

        Invoke(nameof(ActivateChargeAttackEffect), 0.8f); // ‚úÖ ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå 2 ‡∏ß‡∏¥
    }

    void ActivateChargeAttackEffect()
    {
        chargeAttackEffect.SetActive(true);
        chargeAttackHitbox.SetActive(true);

        StartCoroutine(HideEffectAfterTime(chargeAttackEffect, 1f)); // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏´‡∏•‡∏±‡∏á 1 ‡∏ß‡∏¥
        StartCoroutine(HideEffectAfterTime(chargeAttackHitbox, 0.3f)); // ‚úÖ ‡∏õ‡∏¥‡∏î Hitbox ‡∏´‡∏•‡∏±‡∏á 0.3 ‡∏ß‡∏¥
    }
    
    void ShowSlashEffect(int hitIndex)
    {
        if (slashEffects.Length == 0) return;

        int effectIndex = Mathf.Clamp(hitIndex, 0, slashEffects.Length - 1);
        int hitboxIndex = Mathf.Clamp(hitIndex, 0, hitboxSlashes.Length - 1);

        GameObject effect = slashEffects[effectIndex];
        GameObject hitbox = hitboxSlashes[hitboxIndex]; // ‚úÖ ‡πÉ‡∏ä‡πâ hitbox ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ô‡∏µ‡πâ


        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ
        effect.SetActive(true);
        hitbox.SetActive(true); // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Hitbox ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Slash Effect

        // ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÄ‡∏ä‡πà‡∏ô 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        StartCoroutine(HideEffectAfterTime(effect, 0.5f));
        StartCoroutine(HideEffectAfterTime(hitbox, 0.2f)); // ‚úÖ ‡∏õ‡∏¥‡∏î Hitbox ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢
    }

    IEnumerator HideEffectAfterTime(GameObject obj, float delay)
    {
        yield return new WaitForSeconds(delay);
        obj.SetActive(false);
    }
 
    void OnClick()
    {
        lastClickedTime = Time.time;
        noOfClicks++;
        if (noOfClicks == 1)
        {
            animator.SetBool("hit1", true);
            Invoke("ShowSlashEffect_0", 0.8f); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Slash Effect 0 ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        }
        noOfClicks = Mathf.Clamp(noOfClicks, 0, 3);

        if (noOfClicks >= 2 && animator.GetCurrentAnimatorStateInfo(0).normalizedTime > 0.7f && animator.GetCurrentAnimatorStateInfo(0).IsName("GSFirstCombo"))
        {
            animator.SetBool("hit1", false);
            animator.SetBool("hit2", true);
            Invoke("ShowSlashEffect_1", 0.8f); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Slash Effect 1 ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        }
        if (noOfClicks >= 3 && animator.GetCurrentAnimatorStateInfo(0).normalizedTime > 0.7f && animator.GetCurrentAnimatorStateInfo(0).IsName("GSSecondCombo"))
        {
            animator.SetBool("hit2", false);
            animator.SetBool("hit3", true);
            Invoke("ShowSlashEffect_2", 0.9f); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Slash Effect 2 ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        }
    }
    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Effect ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
        void ShowSlashEffect_0() { ShowSlashEffect(0); }
        void ShowSlashEffect_1() { ShowSlashEffect(1); }
        void ShowSlashEffect_2() { ShowSlashEffect(2); }
}
